/* tslint:disable */

/* eslint-disable */

/**
 * Payment gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';

// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from './common';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface AppMessage
 */
export interface AppMessage {
  /**
   * attributes
   * @type {Array<string>}
   * @memberof AppMessage
   */
  attributes: Array<string>;
  /**
   *
   * @type {string}
   * @memberof AppMessage
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof AppMessage
   */
  message: string;
}
/**
 *
 * @export
 * @interface DefaultSuccessResponse
 */
export interface DefaultSuccessResponse {
  /**
   *
   * @type {string}
   * @memberof DefaultSuccessResponse
   */
  status?: string;
}
/**
 *
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
  /**
   * attributes
   * @type {{ [key: string]: string; }}
   * @memberof ErrorMessage
   */
  attributes?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof ErrorMessage
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof ErrorMessage
   */
  message: string;
}
/**
 *
 * @export
 * @interface FlexepinVoucherValidateRequest
 */
export interface FlexepinVoucherValidateRequest {
  /**
   *
   * @type {string}
   * @memberof FlexepinVoucherValidateRequest
   */
  pin: string;
}
/**
 *
 * @export
 * @interface FlexepinVoucherValidateResponse
 */
export interface FlexepinVoucherValidateResponse {
  /**
   *
   * @type {string}
   * @memberof FlexepinVoucherValidateResponse
   */
  amount: string;
  /**
   *
   * @type {string}
   * @memberof FlexepinVoucherValidateResponse
   */
  currencyId: string;
  /**
   *
   * @type {string}
   * @memberof FlexepinVoucherValidateResponse
   */
  result: string;
  /**
   *
   * @type {string}
   * @memberof FlexepinVoucherValidateResponse
   */
  resultDescription: string;
  /**
   *
   * @type {string}
   * @memberof FlexepinVoucherValidateResponse
   */
  status: string;
}
/**
 *
 * @export
 * @interface LivenessProbe
 */
export interface LivenessProbe {
  /**
   *
   * @type {Array<LivenessProbeComponent>}
   * @memberof LivenessProbe
   */
  components?: Array<LivenessProbeComponent>;
  /**
   *
   * @type {string}
   * @memberof LivenessProbe
   */
  tag: string;
}
/**
 *
 * @export
 * @interface LivenessProbeComponent
 */
export interface LivenessProbeComponent {
  /**
   *
   * @type {string}
   * @memberof LivenessProbeComponent
   */
  name: string;
  /**
   *
   * @type {boolean}
   * @memberof LivenessProbeComponent
   */
  status: boolean;
}
/**
 *
 * @export
 * @interface PaymentIQAuthorizeRequest
 */
export interface PaymentIQAuthorizeRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  accountHolder?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  accountId?: string | null;
  /**
   *
   * @type {PaymentIQAuthorizeRequestAttributes}
   * @memberof PaymentIQAuthorizeRequest
   */
  attributes?: PaymentIQAuthorizeRequestAttributes;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  maskedAccount?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  originTxId?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  provider: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  pspFee?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  pspFeeBase?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  pspFeeBaseCy?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  pspFeeCy?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  pspService?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  txAmount: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  txAmountCy: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  txId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  txName: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  txTypeId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequest
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQAuthorizeRequestAttributes
 */
export interface PaymentIQAuthorizeRequestAttributes {
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequestAttributes
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequestAttributes
   */
  expiryMonth?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequestAttributes
   */
  expiryYear?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeRequestAttributes
   */
  internalTxID?: string;
}
/**
 *
 * @export
 * @interface PaymentIQAuthorizeResponse
 */
export interface PaymentIQAuthorizeResponse {
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeResponse
   */
  authCode: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIQAuthorizeResponse
   */
  errCode?: number | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeResponse
   */
  errMsg?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeResponse
   */
  merchantTxId: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentIQAuthorizeResponse
   */
  success: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizeResponse
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQAuthorizedDepositRequest
 */
export interface PaymentIQAuthorizedDepositRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  amount: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  bonusId?: number | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  currency: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  encCvv: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  paymentAccountId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  paymentProviderId: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIQAuthorizedDepositRequest
   */
  playerId: number;
}
/**
 *
 * @export
 * @interface PaymentIQCancelRequest
 */
export interface PaymentIQCancelRequest {
  /**
   *
   * @type {PaymentIQAuthorizeRequestAttributes}
   * @memberof PaymentIQCancelRequest
   */
  attributes?: PaymentIQAuthorizeRequestAttributes;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  authCode: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  provider: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  pspStatusCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  pspStatusMessage?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  txAmount: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  txAmountCy: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  txId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  txName: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  txTypeId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelRequest
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQCancelResponse
 */
export interface PaymentIQCancelResponse {
  /**
   *
   * @type {number}
   * @memberof PaymentIQCancelResponse
   */
  errCode?: number | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelResponse
   */
  errMsg?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof PaymentIQCancelResponse
   */
  success: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentIQCancelResponse
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQDepositRequest
 */
export interface PaymentIQDepositRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  amount?: string | null;
  /**
   *
   * @type {number}
   * @memberof PaymentIQDepositRequest
   */
  bonusId?: number | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  cardHolder?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  cryptoCurrency?: PaymentIQDepositRequestCryptoCurrencyEnum;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  currency: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  encCreditcardNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  encCvv?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  expiryMonth?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  expiryYear?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  paymentProviderId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {number}
   * @memberof PaymentIQDepositRequest
   */
  playerId: number;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositRequest
   */
  voucherNumber?: string | null;
}

/**
 * @export
 * @enum {string}
 */
export enum PaymentIQDepositRequestCryptoCurrencyEnum {
  BTC = 'BTC',
  LTC = 'LTC',
  BCH = 'BCH',
  ETH = 'ETH',
  USDT = 'USDT',
  DOGE = 'DOGE',
  XRP = 'XRP',
}

/**
 * Create a PaymentIQ deposit request
 * @export
 * @interface PaymentIQDepositResponse
 */
export interface PaymentIQDepositResponse {
  /**
   *
   * @type {boolean}
   * @memberof PaymentIQDepositResponse
   */
  status?: boolean;
  /**
   *
   * @type {PaymentIQDepositResponseUrl}
   * @memberof PaymentIQDepositResponse
   */
  url?: PaymentIQDepositResponseUrl;
}
/**
 *
 * @export
 * @interface PaymentIQDepositResponseUrl
 */
export interface PaymentIQDepositResponseUrl {
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositResponseUrl
   */
  container?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositResponseUrl
   */
  html?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositResponseUrl
   */
  method?: string;
  /**
   *
   * @type {object}
   * @memberof PaymentIQDepositResponseUrl
   */
  parameters?: object;
  /**
   *
   * @type {string}
   * @memberof PaymentIQDepositResponseUrl
   */
  url?: string;
}
/**
 *
 * @export
 * @interface PaymentIQEncryptUrlRequest
 */
export interface PaymentIQEncryptUrlRequest {
  /**
   *
   * @type {number}
   * @memberof PaymentIQEncryptUrlRequest
   */
  playerId: number;
}
/**
 *
 * @export
 * @interface PaymentIQEncryptUrlResponse
 */
export interface PaymentIQEncryptUrlResponse {
  /**
   *
   * @type {string}
   * @memberof PaymentIQEncryptUrlResponse
   */
  url?: string;
}
/**
 *
 * @export
 * @interface PaymentIQTransferRequest
 */
export interface PaymentIQTransferRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  accountHolder?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  accountId?: string | null;
  /**
   *
   * @type {PaymentIQAuthorizeRequestAttributes}
   * @memberof PaymentIQTransferRequest
   */
  attributes?: PaymentIQAuthorizeRequestAttributes;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  expiryMonth?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  expiryYear?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  fee: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  feeCy: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  maskedAccount: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  provider: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  pspRefId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txAmount: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txAmountCy: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txName: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txPspAmount: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txPspAmountCy: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txRefId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  txTypeId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferRequest
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQTransferResponse
 */
export interface PaymentIQTransferResponse {
  /**
   *
   * @type {number}
   * @memberof PaymentIQTransferResponse
   */
  errCode?: number | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferResponse
   */
  errMsg?: string | null;
  /**
   *
   * @type {number}
   * @memberof PaymentIQTransferResponse
   */
  merchantTxId: number;
  /**
   *
   * @type {boolean}
   * @memberof PaymentIQTransferResponse
   */
  success: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferResponse
   */
  txId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQTransferResponse
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQVerifyuserRequest
 */
export interface PaymentIQVerifyuserRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserRequest
   */
  sessionId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserRequest
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PaymentIQVerifyuserResponse
 */
export interface PaymentIQVerifyuserResponse {
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  balance: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  balanceCy: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  dob: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  email: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIQVerifyuserResponse
   */
  errCode?: number | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  errMsg?: string | null;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  kycStatus: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  mobile: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  sex: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  state: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  street: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentIQVerifyuserResponse
   */
  success: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  userCat: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQVerifyuserResponse
   */
  zip: string;
}
/**
 *
 * @export
 * @interface PaymentIQWithdrawalRequest
 */
export interface PaymentIQWithdrawalRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentIQWithdrawalRequest
   */
  amount: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQWithdrawalRequest
   */
  currency: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQWithdrawalRequest
   */
  externalCardID: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIQWithdrawalRequest
   */
  paymentProviderId: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIQWithdrawalRequest
   */
  playerId: number;
}

/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get list of application codes
     * @summary Get List of Application Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/app-codes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration);
  return {
    /**
     * Get list of application codes
     * @summary Get List of Application Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppCodes(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppMessage>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCodes(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = GeneralApiFp(configuration);
  return {
    /**
     * Get list of application codes
     * @summary Get List of Application Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppCodes(options?: any): AxiosPromise<Array<AppMessage>> {
      return localVarFp.getAppCodes(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
  /**
   * Get list of application codes
   * @summary Get List of Application Codes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public getAppCodes(options?: AxiosRequestConfig) {
    return GeneralApiFp(this.configuration)
      .getAppCodes(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Liveness Probe
     * @summary Liveness Probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLivenessProbe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/_livenessProbe`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Readiness Probe
     * @summary Readiness Probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReadinessProbe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/_readinessProbe`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     * Liveness Probe
     * @summary Liveness Probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLivenessProbe(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LivenessProbe>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLivenessProbe(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Readiness Probe
     * @summary Readiness Probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReadinessProbe(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReadinessProbe(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     * Liveness Probe
     * @summary Liveness Probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLivenessProbe(options?: any): AxiosPromise<LivenessProbe> {
      return localVarFp.getLivenessProbe(options).then((request) => request(axios, basePath));
    },
    /**
     * Readiness Probe
     * @summary Readiness Probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReadinessProbe(options?: any): AxiosPromise<void> {
      return localVarFp.getReadinessProbe(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   * Liveness Probe
   * @summary Liveness Probe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public getLivenessProbe(options?: AxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .getLivenessProbe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Readiness Probe
   * @summary Readiness Probe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public getReadinessProbe(options?: AxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .getReadinessProbe(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaymentiqApi - axios parameter creator
 * @export
 */
export const PaymentiqApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Validate flexepin voucher
     * @summary Deposit request endpoint
     * @param {FlexepinVoucherValidateRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flexepinVoucherValidatePost: async (
      payload: FlexepinVoucherValidateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('flexepinVoucherValidatePost', 'payload', payload);
      const localVarPath = `/flexepin/voucher/validate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Request authorized deposit via PaymentIQ checkout
     * @summary Authorized deposit request endpoint
     * @param {PaymentIQAuthorizedDepositRequest} payload
     * @param {string} [xForwardedFor]
     * @param {string} [geoCountryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqDepositRequestAuthorizedPost: async (
      payload: PaymentIQAuthorizedDepositRequest,
      xForwardedFor?: string,
      geoCountryCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqDepositRequestAuthorizedPost', 'payload', payload);
      const localVarPath = `/paymentiq/deposit/request/authorized`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xForwardedFor !== undefined && xForwardedFor !== null) {
        localVarHeaderParameter['X-Forwarded-For'] = String(xForwardedFor);
      }

      if (geoCountryCode !== undefined && geoCountryCode !== null) {
        localVarHeaderParameter['geo-country-code'] = String(geoCountryCode);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Request deposit via PaymentIQ checkout
     * @summary Deposit request endpoint
     * @param {PaymentIQDepositRequest} payload
     * @param {string} [xForwardedFor]
     * @param {string} [geoCountryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqDepositRequestPost: async (
      payload: PaymentIQDepositRequest,
      xForwardedFor?: string,
      geoCountryCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqDepositRequestPost', 'payload', payload);
      const localVarPath = `/paymentiq/deposit/request`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xForwardedFor !== undefined && xForwardedFor !== null) {
        localVarHeaderParameter['X-Forwarded-For'] = String(xForwardedFor);
      }

      if (geoCountryCode !== undefined && geoCountryCode !== null) {
        localVarHeaderParameter['geo-country-code'] = String(geoCountryCode);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Request deposit via PaymentIQ checkout
     * @summary Request encrypted soruce file for UI client
     * @param {PaymentIQEncryptUrlRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqEncryptUrlPost: async (
      payload: PaymentIQEncryptUrlRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqEncryptUrlPost', 'payload', payload);
      const localVarPath = `/paymentiq/encryptUrl`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for authorize player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQAuthorizeRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationAuthorizePost: async (
      payload: PaymentIQAuthorizeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationAuthorizePost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/authorize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for cancel operation
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQCancelRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationCancelPost: async (
      payload: PaymentIQCancelRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationCancelPost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/cancel`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for transfer payment
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQTransferRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationTransferPost: async (
      payload: PaymentIQTransferRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationTransferPost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/transfer`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for verifying player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQVerifyuserRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationVerifyuserPost: async (
      payload: PaymentIQVerifyuserRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationVerifyuserPost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/verifyuser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Request withdrawal via PaymentIQ checkout
     * @summary Deposit request endpoint
     * @param {PaymentIQWithdrawalRequest} payload
     * @param {string} [xForwardedFor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqWithdrawalRequestPost: async (
      payload: PaymentIQWithdrawalRequest,
      xForwardedFor?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqWithdrawalRequestPost', 'payload', payload);
      const localVarPath = `/paymentiq/withdrawal/request`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xForwardedFor !== undefined && xForwardedFor !== null) {
        localVarHeaderParameter['X-Forwarded-For'] = String(xForwardedFor);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaymentiqApi - functional programming interface
 * @export
 */
export const PaymentiqApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentiqApiAxiosParamCreator(configuration);
  return {
    /**
     * Validate flexepin voucher
     * @summary Deposit request endpoint
     * @param {FlexepinVoucherValidateRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async flexepinVoucherValidatePost(
      payload: FlexepinVoucherValidateRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlexepinVoucherValidateResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.flexepinVoucherValidatePost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Request authorized deposit via PaymentIQ checkout
     * @summary Authorized deposit request endpoint
     * @param {PaymentIQAuthorizedDepositRequest} payload
     * @param {string} [xForwardedFor]
     * @param {string} [geoCountryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqDepositRequestAuthorizedPost(
      payload: PaymentIQAuthorizedDepositRequest,
      xForwardedFor?: string,
      geoCountryCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQDepositResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqDepositRequestAuthorizedPost(
        payload,
        xForwardedFor,
        geoCountryCode,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Request deposit via PaymentIQ checkout
     * @summary Deposit request endpoint
     * @param {PaymentIQDepositRequest} payload
     * @param {string} [xForwardedFor]
     * @param {string} [geoCountryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqDepositRequestPost(
      payload: PaymentIQDepositRequest,
      xForwardedFor?: string,
      geoCountryCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQDepositResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqDepositRequestPost(
        payload,
        xForwardedFor,
        geoCountryCode,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Request deposit via PaymentIQ checkout
     * @summary Request encrypted soruce file for UI client
     * @param {PaymentIQEncryptUrlRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqEncryptUrlPost(
      payload: PaymentIQEncryptUrlRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQEncryptUrlResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqEncryptUrlPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for authorize player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQAuthorizeRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationAuthorizePost(
      payload: PaymentIQAuthorizeRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQAuthorizeResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationAuthorizePost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for cancel operation
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQCancelRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationCancelPost(
      payload: PaymentIQCancelRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQCancelResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationCancelPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for transfer payment
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQTransferRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationTransferPost(
      payload: PaymentIQTransferRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQTransferResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationTransferPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for verifying player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQVerifyuserRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationVerifyuserPost(
      payload: PaymentIQVerifyuserRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQVerifyuserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationVerifyuserPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Request withdrawal via PaymentIQ checkout
     * @summary Deposit request endpoint
     * @param {PaymentIQWithdrawalRequest} payload
     * @param {string} [xForwardedFor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqWithdrawalRequestPost(
      payload: PaymentIQWithdrawalRequest,
      xForwardedFor?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqWithdrawalRequestPost(
        payload,
        xForwardedFor,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PaymentiqApi - factory interface
 * @export
 */
export const PaymentiqApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PaymentiqApiFp(configuration);
  return {
    /**
     * Validate flexepin voucher
     * @summary Deposit request endpoint
     * @param {FlexepinVoucherValidateRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flexepinVoucherValidatePost(
      payload: FlexepinVoucherValidateRequest,
      options?: any,
    ): AxiosPromise<FlexepinVoucherValidateResponse> {
      return localVarFp.flexepinVoucherValidatePost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * Request authorized deposit via PaymentIQ checkout
     * @summary Authorized deposit request endpoint
     * @param {PaymentIQAuthorizedDepositRequest} payload
     * @param {string} [xForwardedFor]
     * @param {string} [geoCountryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqDepositRequestAuthorizedPost(
      payload: PaymentIQAuthorizedDepositRequest,
      xForwardedFor?: string,
      geoCountryCode?: string,
      options?: any,
    ): AxiosPromise<PaymentIQDepositResponse> {
      return localVarFp
        .paymentiqDepositRequestAuthorizedPost(payload, xForwardedFor, geoCountryCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Request deposit via PaymentIQ checkout
     * @summary Deposit request endpoint
     * @param {PaymentIQDepositRequest} payload
     * @param {string} [xForwardedFor]
     * @param {string} [geoCountryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqDepositRequestPost(
      payload: PaymentIQDepositRequest,
      xForwardedFor?: string,
      geoCountryCode?: string,
      options?: any,
    ): AxiosPromise<PaymentIQDepositResponse> {
      return localVarFp
        .paymentiqDepositRequestPost(payload, xForwardedFor, geoCountryCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Request deposit via PaymentIQ checkout
     * @summary Request encrypted soruce file for UI client
     * @param {PaymentIQEncryptUrlRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqEncryptUrlPost(
      payload: PaymentIQEncryptUrlRequest,
      options?: any,
    ): AxiosPromise<PaymentIQEncryptUrlResponse> {
      return localVarFp.paymentiqEncryptUrlPost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for authorize player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQAuthorizeRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationAuthorizePost(
      payload: PaymentIQAuthorizeRequest,
      options?: any,
    ): AxiosPromise<PaymentIQAuthorizeResponse> {
      return localVarFp.paymentiqIntegrationAuthorizePost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for cancel operation
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQCancelRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationCancelPost(
      payload: PaymentIQCancelRequest,
      options?: any,
    ): AxiosPromise<PaymentIQCancelResponse> {
      return localVarFp.paymentiqIntegrationCancelPost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for transfer payment
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQTransferRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationTransferPost(
      payload: PaymentIQTransferRequest,
      options?: any,
    ): AxiosPromise<PaymentIQTransferResponse> {
      return localVarFp.paymentiqIntegrationTransferPost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for verifying player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQVerifyuserRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationVerifyuserPost(
      payload: PaymentIQVerifyuserRequest,
      options?: any,
    ): AxiosPromise<PaymentIQVerifyuserResponse> {
      return localVarFp
        .paymentiqIntegrationVerifyuserPost(payload, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Request withdrawal via PaymentIQ checkout
     * @summary Deposit request endpoint
     * @param {PaymentIQWithdrawalRequest} payload
     * @param {string} [xForwardedFor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqWithdrawalRequestPost(
      payload: PaymentIQWithdrawalRequest,
      xForwardedFor?: string,
      options?: any,
    ): AxiosPromise<DefaultSuccessResponse> {
      return localVarFp
        .paymentiqWithdrawalRequestPost(payload, xForwardedFor, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaymentiqApi - object-oriented interface
 * @export
 * @class PaymentiqApi
 * @extends {BaseAPI}
 */
export class PaymentiqApi extends BaseAPI {
  /**
   * Validate flexepin voucher
   * @summary Deposit request endpoint
   * @param {FlexepinVoucherValidateRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public flexepinVoucherValidatePost(payload: FlexepinVoucherValidateRequest, options?: AxiosRequestConfig) {
    return PaymentiqApiFp(this.configuration)
      .flexepinVoucherValidatePost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Request authorized deposit via PaymentIQ checkout
   * @summary Authorized deposit request endpoint
   * @param {PaymentIQAuthorizedDepositRequest} payload
   * @param {string} [xForwardedFor]
   * @param {string} [geoCountryCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqDepositRequestAuthorizedPost(
    payload: PaymentIQAuthorizedDepositRequest,
    xForwardedFor?: string,
    geoCountryCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqDepositRequestAuthorizedPost(payload, xForwardedFor, geoCountryCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Request deposit via PaymentIQ checkout
   * @summary Deposit request endpoint
   * @param {PaymentIQDepositRequest} payload
   * @param {string} [xForwardedFor]
   * @param {string} [geoCountryCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqDepositRequestPost(
    payload: PaymentIQDepositRequest,
    xForwardedFor?: string,
    geoCountryCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqDepositRequestPost(payload, xForwardedFor, geoCountryCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Request deposit via PaymentIQ checkout
   * @summary Request encrypted soruce file for UI client
   * @param {PaymentIQEncryptUrlRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqEncryptUrlPost(payload: PaymentIQEncryptUrlRequest, options?: AxiosRequestConfig) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqEncryptUrlPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for authorize player
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQAuthorizeRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqIntegrationAuthorizePost(payload: PaymentIQAuthorizeRequest, options?: AxiosRequestConfig) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqIntegrationAuthorizePost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for cancel operation
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQCancelRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqIntegrationCancelPost(payload: PaymentIQCancelRequest, options?: AxiosRequestConfig) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqIntegrationCancelPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for transfer payment
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQTransferRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqIntegrationTransferPost(payload: PaymentIQTransferRequest, options?: AxiosRequestConfig) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqIntegrationTransferPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for verifying player
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQVerifyuserRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqIntegrationVerifyuserPost(payload: PaymentIQVerifyuserRequest, options?: AxiosRequestConfig) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqIntegrationVerifyuserPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Request withdrawal via PaymentIQ checkout
   * @summary Deposit request endpoint
   * @param {PaymentIQWithdrawalRequest} payload
   * @param {string} [xForwardedFor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentiqApi
   */
  public paymentiqWithdrawalRequestPost(
    payload: PaymentIQWithdrawalRequest,
    xForwardedFor?: string,
    options?: AxiosRequestConfig,
  ) {
    return PaymentiqApiFp(this.configuration)
      .paymentiqWithdrawalRequestPost(payload, xForwardedFor, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * PaymentIQ IPN notification for authorize player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQAuthorizeRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationAuthorizePost: async (
      payload: PaymentIQAuthorizeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationAuthorizePost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/authorize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for cancel operation
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQCancelRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationCancelPost: async (
      payload: PaymentIQCancelRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationCancelPost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/cancel`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for transfer payment
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQTransferRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationTransferPost: async (
      payload: PaymentIQTransferRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationTransferPost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/transfer`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * PaymentIQ IPN notification for verifying player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQVerifyuserRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationVerifyuserPost: async (
      payload: PaymentIQVerifyuserRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'payload' is not null or undefined
      assertParamExists('paymentiqIntegrationVerifyuserPost', 'payload', payload);
      const localVarPath = `/paymentiq/integration/verifyuser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration);
  return {
    /**
     * PaymentIQ IPN notification for authorize player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQAuthorizeRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationAuthorizePost(
      payload: PaymentIQAuthorizeRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQAuthorizeResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationAuthorizePost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for cancel operation
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQCancelRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationCancelPost(
      payload: PaymentIQCancelRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQCancelResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationCancelPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for transfer payment
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQTransferRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationTransferPost(
      payload: PaymentIQTransferRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQTransferResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationTransferPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * PaymentIQ IPN notification for verifying player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQVerifyuserRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentiqIntegrationVerifyuserPost(
      payload: PaymentIQVerifyuserRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIQVerifyuserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentiqIntegrationVerifyuserPost(payload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PublicApiFp(configuration);
  return {
    /**
     * PaymentIQ IPN notification for authorize player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQAuthorizeRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationAuthorizePost(
      payload: PaymentIQAuthorizeRequest,
      options?: any,
    ): AxiosPromise<PaymentIQAuthorizeResponse> {
      return localVarFp.paymentiqIntegrationAuthorizePost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for cancel operation
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQCancelRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationCancelPost(
      payload: PaymentIQCancelRequest,
      options?: any,
    ): AxiosPromise<PaymentIQCancelResponse> {
      return localVarFp.paymentiqIntegrationCancelPost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for transfer payment
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQTransferRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationTransferPost(
      payload: PaymentIQTransferRequest,
      options?: any,
    ): AxiosPromise<PaymentIQTransferResponse> {
      return localVarFp.paymentiqIntegrationTransferPost(payload, options).then((request) => request(axios, basePath));
    },
    /**
     * PaymentIQ IPN notification for verifying player
     * @summary PaymentIQ IPN notification
     * @param {PaymentIQVerifyuserRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentiqIntegrationVerifyuserPost(
      payload: PaymentIQVerifyuserRequest,
      options?: any,
    ): AxiosPromise<PaymentIQVerifyuserResponse> {
      return localVarFp
        .paymentiqIntegrationVerifyuserPost(payload, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
  /**
   * PaymentIQ IPN notification for authorize player
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQAuthorizeRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public paymentiqIntegrationAuthorizePost(payload: PaymentIQAuthorizeRequest, options?: AxiosRequestConfig) {
    return PublicApiFp(this.configuration)
      .paymentiqIntegrationAuthorizePost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for cancel operation
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQCancelRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public paymentiqIntegrationCancelPost(payload: PaymentIQCancelRequest, options?: AxiosRequestConfig) {
    return PublicApiFp(this.configuration)
      .paymentiqIntegrationCancelPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for transfer payment
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQTransferRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public paymentiqIntegrationTransferPost(payload: PaymentIQTransferRequest, options?: AxiosRequestConfig) {
    return PublicApiFp(this.configuration)
      .paymentiqIntegrationTransferPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * PaymentIQ IPN notification for verifying player
   * @summary PaymentIQ IPN notification
   * @param {PaymentIQVerifyuserRequest} payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public paymentiqIntegrationVerifyuserPost(payload: PaymentIQVerifyuserRequest, options?: AxiosRequestConfig) {
    return PublicApiFp(this.configuration)
      .paymentiqIntegrationVerifyuserPost(payload, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
