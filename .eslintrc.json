{
  "settings": {
    "import/resolver": {
      "typescript": {}
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx", ".js"]
    }
  },
  "parserOptions": {
    "project": "./tsconfig.json",
    "tsconfigRootDir": "./"
  },
  "plugins": [
    "react-hooks",
    "testing-library",
    "import",
    "formatjs",
    "prefer-arrow-functions",
    "cypress",
    "react-hooks",
    "@typescript-eslint"
  ],
  "parser": "@typescript-eslint/parser",
  "env": {
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "standard",
    "plugin:@typescript-eslint/recommended",
    "plugin:testing-library/react",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:prettier/recommended",
    "plugin:storybook/recommended",
    "plugin:cypress/recommended"
  ],
  "rules": {
    "no-console": "error",
    "prettier/prettier": "error",
    "formatjs/no-offset": "error",
    "formatjs/enforce-default-message": ["error", "literal"],
    "camelcase": "warn",
    "formatjs/enforce-placeholders": "error",
    "react/react-in-jsx-scope": "off",
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "error", // Checks effect dependencies
    "prefer-arrow-functions/prefer-arrow-functions": "error",
    "import/no-default-export": "error",
    "node/handle-callback-err": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [["builtin", "external"], "internal"],
        "pathGroups": [
          {
            "pattern": "^@(api|hooks|modules|components|pages|common|sharedTypes|utils|lib|helpers)/(.*)$",
            "group": "internal",
            "position": "after"
          }
        ],
        "newlines-between": "always"
      }
    ],
    "prefer-const": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "String": {
            "message": "Use string instead",
            "fixWith": "string"
          },
          "{}": {
            "message": "Use Record<type, type> instead",
            "fixWith": "object"
          }
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["pages/**/*", "**/**/*.stories.tsx"],
      "rules": {
        "import/no-default-export": "off"
      }
    }
  ]
}
